Aufgabe 1:

1.  Batch Queuing bezeichnet das Konzept, mehrere Jobs auf einem Rechner in einer
    sog. Queue anzuordnen, um jedem Job genug Ressourcen zuweisen zu können.

2.  Ein Batch-Queuing-System nimmt erstens Aufträge von Nutzern an und weist ihnen Ressourcen
    zu. Zweitens ermöglicht es, Jobs zu starten, zu verwalten und zu überwachen. Drittens
    verwaltet es die Queue, damit alle Nutzer, die Ressourcen benötigen, sie auch bekommen.

3.  Torque, Slurm, Some Grid Engine

4.  Slurm

5.  sbatch nimmt eine Vielzahl von Argumenten an, mit denen man verschiedenste
    Parameter für die Ausführung kontrollieren kann.
    Grundsätzlich nimmt sbatch aber eine ausführbare Datei an (meistens ein für
    sbatch geschriebenes Shell-Script).

6.  Mit dem Befehl squeue oder smap für eine minimale grafische Oberfläche.

7.  - Benutzerfreundlichkeit
    - Möglichkeit, mit Jobs zu interagieren (löschen, bearbeiten, etc.)

8.  Mit dem Befehl scancel <job-id>

9.  Nein.

10. scontrol show jobid=<job-id>

11. - "Builtin": FIFO-Prinzip, nach Priorität sortiert
    - "Backfill": Das gleiche, aber es können Jobs mit geringerer Priorität
      eingeschoben werden, wenn deren Laufzeitbegrenzung so klein ist, dass
      sie Jobs mit höherer Priorität nicht warten lassen werden.
    Der Cluster benutzt momentan "Backfill".

12. salloc -p west --nodelist=west7
    srun hostname
    Alternativ kann man sich per SSH mit dem allokierten Knoten verbinden und dann
    irgendetwas ausführen.

13. 6 Stunden

14. Mit dem Befehl sprio kann man die Priorität der wartenden Jobs prüfen. Der
    Prioritätswert wird durch eine Funktion berechnet, in der verschiedene
    Variablen vorkommen können. Auf dem Cluster kann man z.B. durch Anfragen von
    einer geringen Anzahl von Nodes die Priorität erhöhen.

15. abu, amd, magny, nehalem, west
    Mit dem Argument -p kann eine Partition angegeben werden.


Aufgabe 2:

Frage 1:
    Die Ausgaben sind nicht chronologisch sortiert, weil die Jobs parallel
    ausgeführt werden.
    Außerdem fällt auf, dass innerhalb eines Knotens die Jobs parallel ausgeführt werden.
    Allerdings vergeht etwas Zeit, bis auf dem nächsten Knoten die nächsten 4 Jobs
    gestartet werden. Dies liegt wahrscheinlich daran, dass das Skript timescript
    so schnell ausgeführt wird, dass man die Verzögerung bemerkt, die dadurch
    verursacht wird, dass slurm nicht mehrere Knoten auf einmal zuweist. Fügt man
    ein "sleep 1" im timescript ein, sieht man, dass alle Knoten tatsächlich parallel
    arbeiten, weil der Zeitunterschied von einem Knoten zum anderen weit unter einer
    Sekunde liegt.

Frage 2:
    Nein, weil dann mehrere Prozesse versuchen würden, gleichzeitig die selbe Datei
    anzulegen.