Wir bezeichnen die Aufrufe für unsere Vergleichsmessungen wiefolgt:

Jacobi-1:       ./partdiff-seq 1 2 64 1 2 10240
Jacobi-2:       ./partdiff-seq 1 2 64 2 2 5120



KEINE OPTIMIERUNG (-O0):

Jacobi-1:       110.718604 s
Jacobi-2:       133.954952 s



###############################################################################
--------------------------- 1 Compiler-Optimierungen --------------------------
###############################################################################

OPTIMIERUNG (-O1):

Jacobi-1:       51.276483 s
Jacobi-2:       88.200447 s


OPTIMIERUNG (-O2):

Jacobi-1:       50.189537 s
Jacobi-2:       80.093677 s


OPTIMIERUNG (-O3):

Jacobi-1:       48.059804 s
Jacobi-2:       79.457755 s


(weitere ungetestete und ungeeignete Optimierungen:)
-Os: optimiert die Größe 
-Og: wie O1, aber besseres Debugging  
-Oz: optimiert hauptsächlich die Größe und nicht Zeit



###############################################################################
----------------------------------- 2 GPROF -----------------------------------
###############################################################################

Da das Kompilieren mit -O3 die Struktur des Codes stark verändern kann, 
und gprof nicht mehr nachverfolgen kann, wo wieviel Zeit aufgewendet wird,
führen wir gprof mit der originalen Optimierung -O0 aus.


srun gprof ./partdiff-seq
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls   s/call   s/call  name
 91.03     86.88    86.88        1    86.88    94.29  calculate
  7.76     94.29     7.40 2758256640     0.00     0.00  getResiduum
  1.15     95.39     1.10        1     1.10     1.10  initMatrices
  0.00     95.39     0.00        4     0.00     0.00  allocateMemory
  0.00     95.39     0.00        1     0.00     0.00  AskParams
  0.00     95.39     0.00        1     0.00     0.00  DisplayMatrix
  0.00     95.39     0.00        1     0.00     0.00  allocateMatrices
  0.00     95.39     0.00        1     0.00     0.00  displayStatistics
  0.00     95.39     0.00        1     0.00     0.00  freeMatrices
  0.00     95.39     0.00        1     0.00     0.00  initVariables


Mit gprof sieht man, dass sich das Programm 91% der Zeit in calculate befindet,
wobei ein Aufruf von calculate 86.88 Sekunden dauert. Demnach wissen wir, dass 
wir hauptsächlich die Funktion calculate ändern bzw. optimieren müssen.

Nach calculate benötigt die Funktion getResiduum mit 7,8% am meisten Zeit. 
Dies liegt aber daran, dass sie sehr häufig aufgerufen wird (2758256640 mal),
denn pro Aufruf braucht getResidum ~0.00 Sekunden. 

Außerdem sehen wir, dass ein Aufruf von initMatrices 1.1 Sekunden dauert.
Hier könnte man ggf. auch etwas optimieren.



###############################################################################
----------------------------------- 3 PERF ------------------------------------
###############################################################################

Wir nutzen hier für perf ebenfalls die Kompilierung mit -O0.

 Performance counter stats for './partdiff-seq 1 2 64 1 2 10240':

        136,294.90 msec task-clock                #    0.999 CPUs utilized
            11,512      context-switches          #    0.084 K/sec
                 1      cpu-migrations            #    0.000 K/sec
             1,134      page-faults               #    0.008 K/sec
   362,822,331,164      cycles                    #    2.662 GHz                      (83.35%)
   158,235,636,390      stalled-cycles-frontend   #   43.61% frontend cycles idle     (83.33%)
    20,277,967,751      stalled-cycles-backend    #    5.59% backend cycles idle      (66.67%)
   629,611,362,351      instructions              #    1.74  insn per cycle
                                                  #    0.25  stalled cycles per insn  (83.35%)
    52,464,330,840      branches                  #  384.932 M/sec                    (83.33%)
         9,336,441      branch-misses             #    0.02% of all branches          (83.33%)

     136.399610819 seconds time elapsed

     136.320085000 seconds user
       0.000000000 seconds sys



context-switches: 
    Ein context-switch ist der Vorgang, bei dem die Bearbeitung des aktuellen 
    Prozesses unterbrochen wird und zu einem anderen gewechselt wird. 
    Dafür muss der Zustand des Prozesses gespeichert und der des neuen wieder-
    hergestellt werden. Mithilfe von context-switches wird multitasking 
    ermöglicht, allerdings sind context-switches zeitintensiv, weshalb sich
    viele context-switches negativ auf die Laufzeit des Programms auswirken 
    können.

cycles: 
    Die Anzahl der cycles beschreiben die Anzahl der CPU-Operationen, 
    die ausgeführt wurden.

instructions: 
    Die Anzahl der instructions beschreiben die Anzahl der logischen Operationen.
    Wenn die Anzahl der instructions nahe der Anzahl der cycles liegen, bedeutet
    das, dass nicht die volle Kapazität der CPU genutzt wurde, denn pro cycle
    können eigentlich mehrere instructions ausgeführt werden.

branches: 
    Die Anzahl der branches beschreibt die Anzahl der Code branches, welche
    beispielsweise durch if-else oder switch cases entstehen.

branch-misses: 
    Ein branch-miss bezeichnet eine falsche branch prediction.
    Viele branch-misses sind schlecht für die Leistung des Programmes, da bei
    richtiger branch prediction zb. memory vorgeladen werden kann und nicht 
    gewartet werden muss, wenn ein vorhergesagter branch eingeschlagen wird.



###############################################################################
------------------------- 4 Berechnungs-optimierungen -------------------------
###############################################################################

Wir nutzen ab jetzt die Optimierungsflag -O3. Die Zeilenangaben beziehen sich
auf die unformatierte Original-Datei.


Zeile 219-223:
Als erstes haben wir in calculate die Iteration über Spalten und Zeilen 
vertauscht, da ursprünglich erst über alle Zeilen und dann alle Spalten
iteriert wurde. So muss immer ein Speicherbereich zur nächsten Zeile über-
sprungen werden, was deutlich länger dauert, als einfach die Zeilen 
hintereinander (also immer das nächste Element im Speicherbereich) aufzurufen.

Jacobi-1:       18.726063 s
Jacobi-2:       77.242255 s



Zeile 232: 
Wir verschieben die Zeile 232 direkt unter Zeile 228, da in Zeile 228 die 
Variable korrektur initialisiert wird und sie nach Zeile 232 nicht mehr 
benötigt wird. Nun muss korrektur nicht mehr gespeichert werden, während
andere Berechnungen ausgeführt werden.
228             korrektur = residuum;
                ...
232				Matrix[m1][i][j] = Matrix[m2][i][j] + korrektur;

Jacobi-1:       17.280679 s
Jacobi-2:       75.378576 s



WEITERE OPTIMIERUNGEN (-Ofast -flto -march=native):

Jacobi-1:        4.700669 s
Jacobi-2:       20.918496 s

Diese Compiler Flags wurden nur mit den Code-Optimierungen zusammen getestet,
weil sie nur dann einen merklichen Effekt hatten.

-Ofast aktiviert einige Funktionen im Compiler, sodass mathematische Operationen
unsicherer aber schneller werden.
-flto aktiviert den "link-time optimizer", der das Linken von verschieden Object
files optimiert.
-march=native lässt den Compiler Maschinencode mit Anweisungen, die speziell für
die aktuelle Prozessorarchitektur ausgelegt sind, generieren.


getResiduum() und star:
Wir haben die Logik zur Berechnung von residuum teilweise in calculate()
verschoben, außerdem haben wir das Vorzeichen von star geändert, sodass für
das residuum nicht noch ein Mal das Vorzeichen geändert werden muss.

        double getResiduum(struct calculation_arguments *arguments,
                          int x, int y, double star) {
            return ((TWO_PI_SQUARE * sin((double)(y)*PI * arguments->h) *
                        sin((double)(x)*PI * arguments->h) * arguments->h * arguments->h +
                    star) /
                4.0);
        }
        ...
        star = Matrix[m2][i - 1][j] + Matrix[m2][i][j - 1] +
               Matrix[m2][i][j + 1] + Matrix[m2][i + 1][j] -
               4.0 * Matrix[m2][i][j];

        residuum = (options->inf_func == FUNC_F0) ? star / 4.0 : getResiduum(arguments, i, j, star);


Zu diesem Zeitpunkt haben wir die niedrigste Laufzeit erreicht:

Jacobi-1:        4.696323 s
Jacobi-2:       18.351894 s


perf nach Optimierungen:

Performance counter stats for './partdiff-seq 1 2 64 1 2 10240':

          4,731.70 msec task-clock                #    0.999 CPUs utilized          
               405      context-switches          #    0.086 K/sec                  
                 4      cpu-migrations            #    0.001 K/sec                  
             1,138      page-faults               #    0.241 K/sec                  
    12,543,076,609      cycles                    #    2.651 GHz                      (83.28%)
     4,160,813,750      stalled-cycles-frontend   #   33.17% frontend cycles idle     (83.24%)
       911,467,390      stalled-cycles-backend    #    7.27% backend cycles idle      (66.81%)
    26,433,169,165      instructions              #    2.11  insn per cycle         
                                                  #    0.16  stalled cycles per insn  (83.37%)
     1,405,242,086      branches                  #  296.984 M/sec                    (83.36%)
         5,415,499      branch-misses             #    0.39% of all branches          (83.32%)

       4.738306074 seconds time elapsed

       4.733351000 seconds user
       0.000000000 seconds sys
